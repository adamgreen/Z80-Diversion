/* Copyright 2023 Adam Green (https://github.com/adamgreen/)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
; Use the RP2040's PIO state machines to interface with the Z80.


; UNDONE: Could just PWM this.
; State machine code to toggle the Z80 CLOCK pin.
;
; SET will need to be configured for the Z80 CLK signal.
;   Z80 CLK should be initialized to low.
.program z80_clk

.wrap_target
    ; Rising edge of Z80 CLK.
    set pins, 1
    ; Falling edge of Z80 CLK.
    set pins, 0
.wrap




; State machine code to detect MREQ'/IOREQ' requests, use the two shift registers to read the Z80's address bits and
; then send them to the CPU. It will also assert the WAIT' signal while it waits for the CPU to complete the request.
;
; Side Set will need to be configured for the Shift_Clock and Shift_Latch pins.
;   They should be initialized with:
;       Shift_Clock low & Shift_Latch high.
; SET will need to be configured for the WAIT' signal.
;   WAIT' should be initialized in the high, un-asserted state.
; INPUT pins to Shift_Even, Shift_Odd, MREQ', IOREQ'.
; ISR should be configured for auto push with a threshold of 18. Left shift through ISR. This leaves the address in
;   the lower 16-bits and the MREQ and IOREQ (not inverted) in bits 16 and 17.
; OSR should be configured for right shift and no auto pull.
.program z80_mreq_ioreq

; Will use side set for the Shift_Clock and Shift_Latch signals.
.side_set 2

.wrap_target
loop:
    ; UNDONE: Don't hardcode gpio19 for RFSH' like this.
    ; Just wait here if RFSH' pin is asserted low as we don't want to check MREQ'/IOREQ' when it is asserted.
    wait 1 gpio 19 side 0b10

    ; RFSH' is no longer asserted so check to see if either MREQ' or IOREQ' are low.
    ; Load IOREQ:MREQ:!Shift_Odd:!Shift_Even pin state into OSR shift register.
    ; Invert the bits so that IOREQ and MREQ both being un-asserted will result in 0b00, instead of 0b11.
    mov osr, !pins side 0b10
    ; Discard Shift_Odd and Shift_Even bits.
    out null, 2 side 0b10
    ; Place active high IOREQ and MREQ bits into X register.
    out x, 2 side 0b10
    ; If neither MREQ or IOREQ are asserted high then we don't have a memory or I/O request to process.
    jmp !x, loop side 0b10

    ; Have a request so assert WAIT and read out the 16-bit address value using the two shift registers.
    ; Assert WAIT' signal by setting it low.
    ; Falling edge of Shift_Latch to latch the address bits.
    set pins, 0 side 0b00
    ; Place MREQ and IOREQ (High if asserted) from X in ISR shift register.
    in x, 2 side 0b00 [2]

    ; Set X up for 8x2 bit address shift loop.
    ; Pull the Shift_Latch pin back high now that the latest address has been latched to prepare for shifting it out.
    set x, 7 side 0b10
shift_loop:
    ; Clocking out the address bits on falling edges of Shift_Clock.
    in pins, 2 side 0b10 [3]
    ; Rising edge of Shift_Clock.
    jmp x--, shift_loop side 0b11 [3]

    ; CPU will send "WAIT 1 GPIO nn" instruction to execute to wait for MREQ' or IOREQ' to de-assert.
    pull side 0b10
    ; De-assert the WAIT' signal by setting it high.
    set pins, 1 side 0b10
    ; Wait for MREQ' or IOREQ' to be de-asserted (set high).
    out exec, 16 side 0b10
.wrap




; State machine code to detect RD'/WR' requests.
;
; INPUT pins to RD', WR', D0-D7, M1'.
; OUTPUT pins to D0-D7.
; ISR should be configured for left shift and auto push with a threshold of 2+8+1=13.
; OSR should be configured for right shift with no auto pull.
.program z80_rd_wr

.wrap_target
loop:
    ; Wait for RD' or WR' to be asserted.
    ; Load RD, WR, D0'-D7', M1 pin state into OSR shift register.
    ; Inverting the bits so that RD' and WR' both being un-asserted will result in 0b00, instead of 0b11.
    mov osr, !pins
    ; Place RD and WR into X register.
    out x, 2
    ; If RD and WR are both 0 then keep looping.
    jmp !x, loop

    ; RD or WR was asserted.
    ; Read the pin states into ISR and have them auto pushed up to the CPU.
    in pins, 11

    ; Wait for CPU to send read/write response bits.
    pull
    ; CPU will send 0babcdefghxxxxxxxx so that it can be used for setting pindirs to input or output and then set
    ; D0-D7 with the specific value which will not be written out to Z80 if pindirs are configured as input.
    out pindirs, 8
    out pins, 8
    ; CPU will send 0b00000000XXXXXXXXXXXXXXXX to contain the "WAIT 1 GPIO nn" instruction to execute and then bits to
    ; restore pindirs to be inputs.
    pull
    ; Wait for RD' or WR' to be de-asserted (set high).
    out exec, 16
    ; Make D0-D7 pins input again before wrapping around and waiting for the next transfer.
    out pindirs, 8
.wrap
